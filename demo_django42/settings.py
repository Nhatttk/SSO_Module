"""
Django settings for demo_django42 project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from datetime import timedelta
from dotenv import load_dotenv
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv(dotenv_path=os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = (os.getenv("APP_DEBUG") == 'true')

ALLOWED_HOSTS = [os.getenv('ALLOWED_HOSTS')]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    #
    'corsheaders',
    'rest_framework',
    'ckeditor',
    'django.contrib.humanize',
    'django_extensions',
    'taggit',
    #
    'api',
    # 'django_user_agents',
    # 'protected_media',
    #
    'rest_framework_api_key',
    "storages",
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    #
    'corsheaders.middleware.CorsMiddleware',
    #
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'demo_django42.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'demo_django42.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.getenv('DB_ENGINE'),
        'NAME':  os.getenv('DB_NAME'),
        'USER':  os.getenv('DB_USER'),
        'PASSWORD':  os.getenv('DB_PASSWORD'),
        'HOST':  os.getenv('DB_HOST'),
        'PORT':  os.getenv('DB_PORT'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

PROJECT_DIR = Path(__file__).resolve().parent
STATICFILES_DIRS = [
    os.path.join(PROJECT_DIR, 'static'),
]

STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'

STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATIC_URL = '/static/'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'
#
PROTECTED_MEDIA_ROOT = "protected/"
PROTECTED_MEDIA_URL = "/protected"
PROTECTED_MEDIA_SERVER = "nginx"  # Defaults to "django"
PROTECTED_MEDIA_LOCATION_PREFIX = "/internal"  # Prefix used in nginx config
# Controls inclusion of a Content-Disposition header
PROTECTED_MEDIA_AS_DOWNLOADS = True
# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ==================================

BASE_URL = os.getenv('BASE_URL')

#
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        # 'rest_framework_api_key.authentication.ClientIdHeaderAuthentication',
    ),
    # "DEFAULT_PERMISSION_CLASSES": [
    #     "rest_framework_api_key.permissions.HasAPIKey",
    # ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 100,
}

#
# CORS_ORIGIN_ALLOW_ALL = True
# CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_WHITELIST = [
    'http://localhost:3000', 'http://127.0.0.1:3000', 'http://localhost:3007', 'http://localhost:3008', 'http://localhost:3018', 'http://localhost:3019', 'http://localhost:3029', 'http://localhost:3009', 'http://127.0.0.1:3008', 'http://127.0.0.1:3009',  'http://localhost:3010', 'http://localhost:8081', 'http://localhost:5173',
]  # If this is used, then not need to use `CORS_ORIGIN_ALLOW_ALL = True`
CORS_ORIGIN_REGEX_WHITELIST = [
    'http://localhost:3000', 'http://127.0.0.1:3000', 'http://localhost:3007', 'http://localhost:3008', 'http://localhost:3018', 'http://localhost:3019', 'http://localhost:3029', 'http://localhost:3009', 'http://127.0.0.1:3008', 'http://127.0.0.1:3009', 'http://localhost:3010', 'http://localhost:8081', 'http://localhost:5173',
]

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=6000),
    # 'REFRESH_TOKEN_LIFETIME': timedelta(minutes=15),
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    'ROTATE_REFRESH_TOKENS': True,
}

JWT_AUTH = {
    'JWT_ALLOW_REFRESH': True,
    # 'JWT_EXPIRATION_DELTA': datetime.timedelta(days=1),
    # 'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(days=7),
    'JWT_BLACKLIST': True,
}

FRONTEND_SITE_URL_ACTIVE_ACCOUNT = os.getenv(
    'FRONTEND_SITE_URL_ACTIVE_ACCOUNT')
FRONTEND_SITE_URL_RESET_PASSWORD = os.getenv(
    'FRONTEND_SITE_URL_RESET_PASSWORD')

EMAIL_TITLE = os.getenv('EMAIL_TITLE')
EMAIL_FROM = os.getenv('EMAIL_FROM')
EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS')
EMAIL_PORT = os.getenv('EMAIL_PORT')
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')

#
LOGIN_URL = '/admin/login/'
# LOGIN_REDIRECT_URL = '/management/dashboard/'

GROUP_NAME = {
    'SUPERADMIN': 'superadmin_group',
    'ADMIN': 'admin_group',
    'MEMBER': 'member_group'
}

#
CKEDITOR_UPLOAD_PATH = 'ckeditor_uploads/'
CKEDITOR_IMAGE_BACKEND = "pillow"
CKEDITOR_CONFIGS = {
    'default': {
        # 'toolbar': 'standard',
        'height': 100,
        'toolbar_myCustomToolbarConfig': [
            # {'name': 'document', 'items': ['Source', '-', 'Save', 'NewPage', 'Preview', 'Print', '-', 'Templates']},
            # {'name': 'clipboard', 'items': ['Cut', 'Copy', 'Paste', 'PasteText', 'PasteFromWord', '-', 'Undo', 'Redo']},
            # {'name': 'editing', 'items': ['Find', 'Replace', '-', 'SelectAll']},
            {'name': 'basicstyles',
             'items': ['Bold', 'Italic', 'Underline', 'Strike', 'Subscript', 'Superscript', '-', 'RemoveFormat']},
            # {'name': 'paragraph',
            #  'items': ['NumberedList', 'BulletedList', '-', 'Outdent', 'Indent', '-', 'Blockquote', 'CreateDiv', '-',
            #            'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock', '-', 'BidiLtr', 'BidiRtl',
            #            'Language']},
            # {'name': 'links', 'items': ['Link', 'Unlink', 'Anchor']},
            # {'name': 'insert',
            #  'items': ['Image', 'Table', 'HorizontalRule', 'Smiley', 'SpecialChar', 'PageBreak', 'Iframe']},
            # '/',
            # {'name': 'styles', 'items': ['Styles', 'Format', 'Font', 'FontSize']},
            # {'name': 'colors', 'items': ['TextColor', 'BGColor']},
            # {'name': 'tools', 'items': ['Maximize', 'ShowBlocks']},
        ],
        'toolbar': 'myCustomToolbarConfig',
        "versionCheck": False
    },
}

# #
# AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID", "")
# AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY", "")
# AWS_STORAGE_BUCKET_NAME = os.getenv("AWS_STORAGE_BUCKET_NAME", "")
# AWS_STORAGE_REGION = os.getenv("AWS_STORAGE_REGION", "")

# IS_AWS_S3 = (
#     AWS_ACCESS_KEY_ID and
#     AWS_SECRET_ACCESS_KEY and
#     AWS_STORAGE_BUCKET_NAME and
#     AWS_STORAGE_REGION
# )
# print("IS_AWS_S3:", IS_AWS_S3)
# if IS_AWS_S3:
#     AWS_S3_FILE_OVERWRITE = False
#     AWS_S3_REGION_NAME = os.getenv("AWS_S3_REGION_NAME", "")
#     # AWS_S3_SIGNATURE_VERSION = os.getenv("AWS_S3_SIGNATURE_VERSION", "")
#     # AWS_S3_CUSTOM_DOMAIN =  os.getenv("AWS_S3_SIGNATURE_VERSION", "")
#     AWS_S3_OBJECT_PARAMETERS = {"CacheControl": "max-age=86400"}
#     # (optional; default is None which means the file will inherit the bucket’s permission)
#     AWS_DEFAULT_ACL = os.getenv("AWS_DEFAULT_ACL", "public-read")
#     # store files under directory `media/` in bucket `my-app-bucket`, If not set (optional: default is ‘’)
#     AWS_LOCATION = ""
#     DEFAULT_FILE_STORAGE = os.getenv(
#         "STATICFILES_STORAGE", "storages.backends.s3boto3.S3Boto3Storage"
#     )
#     AWS_QUERYSTRING_EXPIRE = 300
#     AWS_S3_CUSTOM_DOMAIN = os.getenv("AWS_S3_CUSTOM_DOMAIN", "")
#     AWS_CLOUDFRONT_KEY_ID = os.getenv("AWS_CLOUDFRONT_KEY_ID", "").strip()
#     AWS_CLOUDFRONT_KEY = os.getenv(
#         "AWS_CLOUDFRONT_KEY", "").encode("ascii").strip()


#
SESSION_COOKIE_SAMESITE = 'Strict'
# SESSION_COOKIE_SECURE = True


CLIENT_ID = os.getenv("CLIENT_ID")
CLIENT_SECRET = os.getenv("CLIENT_SECRET")
REDIRECT_URI = 'http://localhost:8000/api/auth/google-callback/'